@page "/editproduct/{id:int}"

@attribute [Authorize]

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />

@if (_product != null)
{
    <EditForm Model="_product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>        
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="_product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="_product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent _productInventories="_product.ProductInventories" OnInventorySelected="OnInventorySelected"></ProductInventoriesComponent>

        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Product? _product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _product = await ViewProductByIdUseCase.ExecuteAsync(Id);
    }

    private async Task OnValidSubmit()
    {
        EditProductUseCase.ExecuteAsync(_product);
        NavigationManager.NavigateTo("/products");
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        _product.ProductInventories = productInventories;
    }
}
