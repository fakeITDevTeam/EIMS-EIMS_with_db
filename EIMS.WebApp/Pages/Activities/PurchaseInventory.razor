@page "/purchase"

@attribute [Authorize]

@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

@using EIMS.WebApp.ViewModels;

<h3>Purchase Inventory</h3>
<br />

@if (purchaseViewModel != null)
{
    <EditForm Model="purchaseViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Purchase Order</label>
            <InputText id="po" @bind-Value="purchaseViewModel.PurchaseOrder" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Inventory to Purchase</label>
            <ViewInventoriesComponent OnSelectInventory="OnSelectInventory" DisplaySearchResult="true"></ViewInventoriesComponent> 
            <InputText id="inv" class="form-control" @bind-Value="purchaseViewModel.InventoryName" disabled></InputText>
            @* <input type="text" class="form-control" disabled value="@selectedInventory?.InventoryName" /> *@
            <input type="hidden" value="@purchaseViewModel?.InventoryId" />
            @if (selectedInventory != null)
            {
                <text>Price:</text>
                @selectedInventory?.Price.ToString("c")
            }
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Purchase</button>
    </EditForm>
}



@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory selectedInventory;

    private void OnSelectInventory(Inventory inventory)
    {
        selectedInventory = inventory;
        purchaseViewModel.InventoryId = inventory.InventoryId;
        purchaseViewModel.InventoryName = inventory.InventoryName;
    }

    private async Task OnValidSubmit()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(purchaseViewModel.PurchaseOrder, selectedInventory, purchaseViewModel.QuantityToPurchase, "Niobe");

        purchaseViewModel = new PurchaseViewModel();
        selectedInventory = null;

    }
}
