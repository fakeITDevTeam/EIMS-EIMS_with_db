@page "/produce"

@attribute [Authorize]

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProductingUseCase ValidateEnoughInventoriesForProductingUseCase

@using EIMS.WebApp.ViewModels;

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>

<h3>Produce Product</h3>

<br />

@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Production Number</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Product to Produce</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            @* <input type="text" class="form-control" disabled value="@selectedProduct?.ProductName" /> *@
            <input type="hidden" value="@produceViewModel?.ProductId" />
            @if (selectedProduct != null)
            {
                <text>Price:</text>
                @selectedProduct?.Price.ToString("c")
            }
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Produce</button>
    </EditForm>
}

@code {

    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        if (!await ValidateEnoughInventoriesForProductingUseCase.ExecuteAsync(selectedProduct, produceViewModel.QuantityToProduce))
        {
            errorMessage = $"The inventories are not enough for producing the product {selectedProduct.ProductName} x {produceViewModel.QuantityToProduce} times";

            return;    
        }
        else
        {
            errorMessage = string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber,
            selectedProduct,
            produceViewModel.QuantityToProduce,
            "Niobe"
        );

        produceViewModel = new ProduceViewModel();
        selectedProduct = null;
        errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product product)
    {
        selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }
}
