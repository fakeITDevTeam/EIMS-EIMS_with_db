@page "/sell"
@* @using EIMS.WebApp.ViewModels; *@

@attribute [Authorize]

@inject ISellProductUseCase SellProductUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Sell Product</h3>

<br />

@if (sellViewModel != null)
{
    <EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Sales Order Number</label>
            <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Product to Sell</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="sellViewModel.ProductName" disabled></InputText>
            @* <input type="text" class="form-control" disabled value="@selectedProduct?.ProductName" /> *@
            <input type="hidden" value="@sellViewModel?.ProductId" />
            @* @if (selectedProduct != null)
            {
                <text>Price:</text>
                @selectedProduct?.Price.ToString("c")
            } *@
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="sellViewModel.ProductPrice" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Proceed</button>
    </EditForm>
}

@code {

    private SellViewModel sellViewModel = new SellViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private void OnValidSubmit()
    {
        if (selectedProduct.Quantity < sellViewModel.QuantityToSell)
        {
            errorMessage = $"The quantity of the product is not enough. Only {selectedProduct.Quantity} are available.";
            return;
        }
        else
        {
            errorMessage = string.Empty;
        }

        SellProductUseCase.ExecuteAsync(
            sellViewModel.SalesOrderNumber,
            selectedProduct,
            sellViewModel.QuantityToSell,
            "Niobe"
        );

        sellViewModel = new SellViewModel();
        selectedProduct = null;
        errorMessage = string.Empty;
    }

    private void OnSelectProduct(Product product)
    {
        selectedProduct = product;
        sellViewModel.ProductId = product.ProductId;
        sellViewModel.ProductName = product.ProductName;
        sellViewModel.ProductPrice = product.Price;

    }
}
